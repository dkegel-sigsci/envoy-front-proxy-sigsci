# This is from envoy 1.17's front-proxy example,
# https://github.com/envoyproxy/envoy/blob/1dd8c12faad8095fc667e9740e7a154f65e24f01/examples/front-proxy/front-envoy.yaml
# minus the https listener from
# https://github.com/envoyproxy/envoy/commit/8920bcc681e97b0b4a63fc62d2cf969d8eba96e2
# and a few port number changes (marked with orig: ) to match the old version
# plus three sigsci-specific sections, see below.

static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 80  # orig: 8000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/service/1"
                route:
                  cluster: service1
              - match:
                  prefix: "/service/2"
                route:
                  cluster: service2
          ## begin sigsci part 1 ##
          access_log:
          - name: envoy.access_loggers.http_grpc
            typed_config:
              "@type":  type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
              common_config:
                log_name: "sigsci-agent-grpc"
                transport_api_version: v3
                grpc_service:
                  envoy_grpc:
                    cluster_name: sigsci-agent-grpc1
                  timeout: 0.2s
              additional_request_headers_to_log:
              # These are required:
              - "x-sigsci-request-id"
              - "x-sigsci-waf-response"
              # These are additional you want recorded:
              - "accept"
              - "content-type"
              - "content-length"
              additional_response_headers_to_log:
              # These are additional you want recorded:
              - "date"
              - "server"
              - "content-type"
              - "content-length"
          ## end sigsci part 1 ##
          http_filters:
          ## begin sigsci part 2 ##
          - name: envoy.lua
            typed_config:
              "@type":  "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
              inline_code: |
                -- Add an internal :body header to pass the body if <= 8KB
                function envoy_on_request(req)
                  len = 0
                  cl = req:headers():get("content-length")
                  if cl ~= nil then
                    len = tonumber(cl)
                  end
                  if len > 0 and len <= 8192 then
                    reqbody = req:body():getBytes(0, len)
                    req:headers():add(":body", reqbody)
                  end
                end
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              transport_api_version: v3
              grpc_service:
                envoy_grpc:
                  cluster_name: sigsci-agent-grpc1
                timeout: 5.2s
              failure_mode_allow: true
          - name: envoy.filters.http.wasm
            typed_config:
              "@type": type.googleapis.com/udpa.type.v1.TypedStruct
              type_url: type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
              value:
                config:
                  name: "my_plugin"
                  root_id: "my_root_id"
                  vm_config:
                    vm_id: "my_vm_id"
                    runtime: "envoy.wasm.runtime.v8"
                    code:
                      local:
                        filename: "/etc/wasmfilter.wasm"
                    allow_precompiled: true
          ## end sigsci part 2 ##
          - name: envoy.filters.http.router
            typed_config: {}
  clusters:
  - name: service1
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    load_assignment:
      cluster_name: service1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: service1
                port_value: 80  # orig: 8000
  - name: service2
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    load_assignment:
      cluster_name: service2
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: service2
                port_value: 80  # orig: 8000
  ## begin sigsci part 3 ##
  - name: sigsci-agent-grpc1
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    #tls_context: {}
    load_assignment:
      cluster_name: sigsci-agent-grpc1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: sigsci-agent-grpc
                port_value: 8000
  ## end sigsci part 3 ##

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
layered_runtime:
  layers:
    - name: static_layer_0
      static_layer:
        envoy:
          resource_limits:
            listener:
              example_listener_name:
                connection_limit: 10000
        overload:
          global_downstream_max_connections: 50000
